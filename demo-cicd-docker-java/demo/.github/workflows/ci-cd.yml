name: CI/CD Pipeline

on:
  push:
    branches:
      - new-branch
  pull_request:
    branches:
      - new-branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # 1. Sprawdzenie kodu
    - name: Checkout code
      uses: actions/checkout@v2

    # 2. Set up JDK 17
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adoptopenjdk'

    # 3. Instalacja zależności Maven
    - name: Set up Maven
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        maven-version: '3.8.1'

    # 4. Budowanie projektu
    - name: Build with Maven
      run: mvn clean install -DskipTests=true

    # 5. Uruchomienie testów
    - name: Run tests
      run: mvn test

  docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
    # 1. Sprawdzenie kodu
    - name: Checkout code
      uses: actions/checkout@v2

    # 2. Instalacja Docker
    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    # 3. Budowanie i uruchamianie kontenera
    - name: Build Docker image
      run: |
        docker-compose -f docker-compose.yml build
        docker-compose up -d

    # 4. Testowanie aplikacji (możesz dodać dodatkowe kroki testowe w Dockerze)
    - name: Run application tests in Docker
      run: docker ps

  # W tym przypadku zakłada się, że chcesz wysłać artefakt do repozytorium Docker Hub lub do innej platformy.
  # Przykładowe zadanie "push" do Docker Hub:
  push_to_dockerhub:
    runs-on: ubuntu-latest
    needs: docker
    steps:
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push Docker image to Docker Hub
      run: |
        docker tag demo:latest your_dockerhub_username/demo:latest
        docker push your_dockerhub_username/demo:latest

